<?xml version="1.0" encoding="windows-1252"?>
<XMI xmi.version="1.1" xmlns:UML="omg.org/UML1.3">
	<XMI.header>
		<XMI.documentation>
			<XMI.exporter>Enterprise Architect</XMI.exporter>
			<XMI.exporterVersion>2.5</XMI.exporterVersion>
		</XMI.documentation>
	</XMI.header>
	<XMI.content>
		<UML:Model name="EA Model" xmi.id="MX_EAID_9B4BC5D5_92CF_40e3_8ED8_DA4371383F4D">
			<UML:Namespace.ownedElement>
				<UML:Class name="EARootClass" xmi.id="EAID_11111111_5487_4080_A7F4_41526CB0AA00" isRoot="true" isLeaf="false" isAbstract="false"/>
				<UML:Package name="System Distribution Model" xmi.id="EAPK_9B4BC5D5_92CF_40e3_8ED8_DA4371383F4D" isRoot="false" isLeaf="false" isAbstract="false" visibility="public">
					<UML:ModelElement.taggedValue>
						<UML:TaggedValue tag="documentation" value="&lt;b&gt;Purpose&lt;/b&gt;: Shall describe logical units or components that must be distributed and deployed together.&#xA;&#xA;&lt;b&gt;Input&lt;/b&gt;: System Decomposition Model, System Collaboration Model (Component View)&#xA;&#xA;&lt;b&gt;Output&lt;/b&gt;: UML Deployment Diagram and textual descriptions (rationale)&#xA;&#xA;In this model, the logical distribution of all components that are part of the target system must be described. To create the distribution model, one will need to consider the following environmental parameters:&#xA;&lt;ul&gt;&#xA;	&lt;li&gt;&lt;b&gt;System size&lt;/b&gt;. The number of components and interfaces involved. A large system would normally require higher degree of distribution than a small system,&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Geographical distribution of components&lt;/b&gt;. The geographical location of interfacing environment components. If the target system components will interface existing components, this must be considered when creating the system distribution model.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Communication properties&lt;/b&gt;. If communication lines between nodes in the system are slow, one should model distribution in order to optimise the target system performance. Components that require high bandwidth and low latency should not be distributed apart from each other. &lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Data processing capacity&lt;/b&gt;. The components&amp;rsquo; need for data processing power varies a lot. Target system performance will depend on the distribution of processing intensive components. One should seek to distribute such components onto separate logical nodes to facilitate system load sharing.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Reference Architecture tier&lt;/b&gt;. Components at each tier can be distributed independent of each other. However, one should seek to avoid separation of components in the user interface and user service tiers. In the same manner, components in the business tier should not be separated from resource tier components that form the basis for their operations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;In addition to these properties, requirements specified in the &lt;i&gt;Requirement View&lt;/i&gt; may be directly or indirectly related to the distribution of components. If high performance is a requirement or a system concern, the system components should be distributed in a way so that this requirement can be met. Each category of requirements defined in the &lt;i&gt;Requirement View&lt;/i&gt; can affect the distribution model.&#xA;The &lt;i&gt;Component View&lt;/i&gt; describes the component decomposition and interaction. This information is of highest importance for the distribution models. As for general system engineering, we seek to minimise external coupling of components. &#xA;&lt;ul&gt;&#xA;	&lt;li&gt;&lt;b&gt;The system decomposition model&lt;/b&gt; describes how the system is divided into different components or packages of components, and how these are related to form a coherent whole. Thus, it identifies the lowest level of distributable components, that is, which components or packages of components that actually can be distributed. &lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;The system collaboration model&lt;/b&gt; provides information about which components are interacting with which. Components that interact intensively with each other should not be distributed separately. &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;The target system&amp;rsquo;s concerns influence the distribution model. An important concern with respect to distribution is transparencies. It is highly recommended to conform to the distribution transparencies defined in RM-ODP [RM-ODP 1995].  Using these transparencies, one will hide complexity related to component distribution from all tiers in the Reference Architecture. The transparencies defined in RM-ODP are:&#xA;&lt;ul&gt;&#xA;	&lt;li&gt;&lt;b&gt;Access transparency&lt;/b&gt;, which masks differences in &lt;i&gt;data &lt;/i&gt;representation and &lt;i&gt;invocation &lt;/i&gt;mechanisms to enable interworking between objects. This distribution transparency solves many of the problems of interworking between heterogeneous systems, and will generally be provided by default.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Failure transparency&lt;/b&gt;, which masks from an object the failure and possible &lt;i&gt;recovery &lt;/i&gt;of other objects (or itself) to enable fault tolerance. When this distribution transparency is provided, the designer can work in an idealized world in which the corresponding class of failures does not occur.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Location transparency&lt;/b&gt;, which masks the use of information about &lt;i&gt;location in space &lt;/i&gt;when identifying and binding to interfaces. This distribution transparency provides a logical view of naming, independent of actual physical location.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Migration transparency&lt;/b&gt;, which masks from an object the ability of a system to change the location of that object. Migration is often used to achieve load balancing and reduce latency.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Relocation transparency&lt;/b&gt;, which masks relocation of an interface from other interfaces bound to it. Relocation allows system operation to continue even when migration or replacement of some objects creates temporary inconsistencies in the view seen by their users.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Replication transparency&lt;/b&gt;, which masks the use of a group of mutually behaviorally compatible objects to support an interface. Replication is often used to enhance performance and availability.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Persistence transparency&lt;/b&gt;, which masks from an object the &lt;i&gt;deactivation &lt;/i&gt;and &lt;i&gt;reactivation &lt;/i&gt;of other objects (or itself). Deactivation and reactivation are often used to maintain the &lt;i&gt;persistence &lt;/i&gt;of an object when the system is unable to provide it with processing, storage and communication functions continuously.&lt;/li&gt;&#xA;	&lt;li&gt;&lt;b&gt;Transaction transparency&lt;/b&gt;, which masks coordination of activities amongst a configuration of objects to achieve consistency.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;One can implement one or more of these transparencies, dependent of system requirements. "/>
						<UML:TaggedValue tag="parent" value="EAPK_804CDA3B_8375_499b_92B8_99410C2644F3"/>
						<UML:TaggedValue tag="created" value="2010-06-02 15:56:02"/>
						<UML:TaggedValue tag="modified" value="2010-06-02 15:56:02"/>
						<UML:TaggedValue tag="iscontrolled" value="TRUE"/>
						<UML:TaggedValue tag="xmlpath" value="Distribution View\System Distribution Model.xml"/>
						<UML:TaggedValue tag="version" value="1.0"/>
						<UML:TaggedValue tag="isprotected" value="FALSE"/>
						<UML:TaggedValue tag="usedtd" value="FALSE"/>
						<UML:TaggedValue tag="owner" value="BabakF"/>
						<UML:TaggedValue tag="xmiver" value="Enterprise Architect XMI/UML 1.3"/>
						<UML:TaggedValue tag="logxml" value="FALSE"/>
						<UML:TaggedValue tag="tpos" value="1"/>
						<UML:TaggedValue tag="packageFlags" value="Recurse=0;VCCFG=uAAL;CRC=0;"/>
						<UML:TaggedValue tag="batchsave" value="0"/>
						<UML:TaggedValue tag="batchload" value="0"/>
						<UML:TaggedValue tag="phase" value="1.0"/>
						<UML:TaggedValue tag="status" value="Proposed"/>
						<UML:TaggedValue tag="author" value="BabakF"/>
						<UML:TaggedValue tag="complexity" value="1"/>
						<UML:TaggedValue tag="ea_stype" value="Public"/>
						<UML:TaggedValue tag="tpos" value="1"/>
						<UML:TaggedValue tag="gentype" value="Java"/>
					</UML:ModelElement.taggedValue>
					<UML:Namespace.ownedElement/>
				</UML:Package>
			</UML:Namespace.ownedElement>
		</UML:Model>
	</XMI.content>
	<XMI.difference/>
	<XMI.extensions xmi.extender="Enterprise Architect 2.5"/>
</XMI>
